oncue {
	scheduler {
		name = "scheduler"
		path = "/user/scheduler"
		class = "oncue.scheduler.SimpleQueuePopScheduler"
		
		// The frequency with which unscheduled jobs are broadcast
		broadcast-jobs-frequency = 5 seconds
		
		// Time to wait after a new job has arrived before broadcasting jobs
		broadcast-jobs-quiescence-period = 1 second
		
		// The frequency with which agents are monitored for death
		monitor-agents-frequency = 5 seconds
		
		// The timeout before an agent is deemed to be dead
		agent-heartbeat-timeout = 15 seconds
	}
	queue-manager {
		name = "queueManager"
		path = "/user/queueManager"
		class = "oncue.queueManager.RedisQueueManager"
	}
	agent {
		name = "agent"
		path = "/user/agent"
		class = "oncue.agent.UnlimitedCapacityAgent"
				
		// The frequenct of agent heartbeats		
		heartbeat-frequency = 5 seconds
		
		// Maximum number of concurrent jobs to process
		throttled-agent {
			max-jobs = 1000
		}		
	}
	api {
		name = "api"
				
		// The timeout for all API invocations
		timeout = 2 seconds						
	}
	
	// Run jobs on a timetable
	// See: http://camel.apache.org/quartz.html for URI format
	timetable = [
		{
			type = TestWorker
			name = "test-worker-1"
			endpointUri = "quartz://test-worker-1?trigger.repeatInterval=1000&trigger.repeatCount=-1&fireNow=false" 
		}, 
		{
			type = TestWorker
			name = "test-worker-2"
			endpointUri = "quartz://test-worker-2?trigger.repeatInterval=1000&trigger.repeatCount=-1&fireNow=false"
			parameters = {
				user-defined-key-1 = "user defined value 1"
				user-defined-key-2 = "user defined value 2"
			}
		}
	]
}

akka {
	loglevel = DEBUG
	actor {
		guardian-supervisor-strategy = "oncue.ServiceSupervisor"
		debug {
			autoreceive = off
			lifecycle = off
		}
	}
}