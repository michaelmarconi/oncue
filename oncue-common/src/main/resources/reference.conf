oncue {
	queue-manager {
		class = "oncue.queuemanager.InMemoryQueueManager"
		// class = "oncue.queueManager.RedisQueueManager"				
		name = "queue-manager"
		path = "/user/queue-manager"
		
		// The amount of time to wait for a queue manager response		
		timeout = 2 seconds
	}
	
	scheduler {
		name = "scheduler"
		path = "/user/scheduler"
		class = "oncue.scheduler.SimpleQueuePopScheduler"
		// class = "oncue.scheduler.ThrottledScheduler"
		
		// Uncomment the following to use the persistent Redis Backing Store		
		// backing-store-class = "oncue.service.backingstore.RedisBackingStore"
		
		// The frequency with which unscheduled jobs are broadcast
		broadcast-jobs-frequency = 5 seconds
		
		// Time to wait after a new job has arrived before broadcasting jobs
		broadcast-jobs-quiescence-period = 1 second
		
		// The frequency with which agents are monitored for death
		monitor-agents-frequency = 5 seconds
		
		// The timeout before an agent is deemed to be dead
		agent-heartbeat-timeout = 15 seconds
	}
	
	timed-jobs {
		// The amount of time to wait before retrying a timed job
		retry-delay = 10 seconds
				
		// No timed jobs by default
		timetable = []
	}
	
	agent {
		class = "oncue.agent.UnlimitedCapacityAgent"
		// class = "oncue.agent.ThrottledAgent"
		// throttled-agent.max-jobs = 10
		name = "agent"
		path = "/user/agent"
		
		scheduler-path = "/user/scheduler"
		
		// The frequenct of agent heartbeats		
		heartbeat-frequency = 5 seconds	
		
		
		// No worker classes by default
		workers = []
	}
	
	api {
		name = "api"
		timeout = 2 seconds
	}
}