# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="vaflRgAKC@<q3]p/V@>3i;VyuuXcTOo<TqFH?QbHvdLDt0YubFU4t:wvAi[:9fSM"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=oncue.OnCueService

# Router 
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point. 
# Furthermore, it's assumed your route file is named properly. 
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# See logger.xml in /conf

#
# onCue configuration
# ~~~~~
#

oncue {
	akka {
		loglevel = DEBUG // Don't change this! See logger.xml instead
		event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
		actor {
			provider = "akka.remote.RemoteActorRefProvider"
			guardian-supervisor-strategy = "oncue.common.supervisors.ServiceSupervisor"				
	    }
	    remote {
	        transport = "akka.remote.netty.NettyRemoteTransport"
	        netty {
	        	hostname = "localhost"
		        port = 9090
			}
		}
	}
}

oncue {
	scheduler {
		class = "oncue.scheduler.ThrottledScheduler"
		backing-store {
			class = "oncue.backingstore.RedisBackingStore"
			redis {
			  	host = "localhost"
			  	port = 6379
			 }
		}
	}	
	
	timed-jobs {
		// the time table of timed jobs
		timetable = [
		    {
		    	// The maintenance worker will clear complete/failed jobs out of the backing store         
 				type = "oncue.worker.MaintenanceWorker"
 				name = "maintenance-worker"
 				endpointUri = "quartz://maintenance-worker?trigger.repeatInterval=3600000&trigger.repeatCount=-1&fireNow=false"  // Repeat hourly
 				parameters = {
 					include-failed-jobs = true
 					expiration-age = "24 hours" // Expressed as an Akka Duration (see: http://doc.akka.io/docs/akka/snapshot/common/duration.html)
 				}
 				failureRetryCount = 3
 			}
 		]
	}	
}

